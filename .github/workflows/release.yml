# .github/workflows/release.yml
name: Build and Release Desktop App

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

# Add permissions for creating releases
permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            executable: Lion-AI-Detection.exe
            asset_name: Lion-AI-Detection-Windows
            
          - os: macos-latest
            executable: Lion-AI-Detection
            asset_name: Lion-AI-Detection-macOS
            
          - os: ubuntu-latest
            executable: Lion-AI-Detection
            asset_name: Lion-AI-Detection-Linux
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-tk
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        cd desktop-app
        pip install --only-binary=all pyaudio || pip install pyaudio
        pip install -r requirements.txt
    
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd desktop-app
        if (Test-Path "deepfake_monitor.py") {
          Write-Host "‚úÖ deepfake_monitor.py found"
        } else {
          Write-Host "‚ùå deepfake_monitor.py missing"
          exit 1
        }
        if (-not (Test-Path "lion_icon.ico")) {
          Write-Host "Creating basic icon..."
          python -c "from PIL import Image; img=Image.new('RGB',(64,64),'#FFD700'); img.save('lion_icon.ico')"
        }
        if (Test-Path "lion_icon.ico") {
          pyinstaller --onefile --windowed --icon="lion_icon.ico" --name="Lion-AI-Detection" deepfake_monitor.py
        } else {
          pyinstaller --onefile --windowed --name="Lion-AI-Detection" deepfake_monitor.py
        }
        Copy-Item "dist\Lion-AI-Detection.exe" "..\Lion-AI-Detection.exe"
      shell: pwsh

    - name: Build executable (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd desktop-app
        if [ -f "deepfake_monitor.py" ]; then
          echo "‚úÖ deepfake_monitor.py found"
        else
          echo "‚ùå deepfake_monitor.py missing"
          exit 1
        fi
        if [ ! -f "lion_icon.ico" ]; then
          echo "Creating basic icon..."
          python -c "from PIL import Image; img=Image.new('RGB',(64,64),'#FFD700'); img.save('lion_icon.ico')"
        fi
        pyinstaller --onefile --windowed --name="Lion-AI-Detection" deepfake_monitor.py
        cp dist/Lion-AI-Detection ../Lion-AI-Detection
      shell: bash

    - name: Build executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd desktop-app
        if [ -f "deepfake_monitor.py" ]; then
          echo "‚úÖ deepfake_monitor.py found"
        else
          echo "‚ùå deepfake_monitor.py missing"
          exit 1
        fi
        if [ ! -f "lion_icon.ico" ]; then
          echo "Creating basic icon..."
          python -c "from PIL import Image; img=Image.new('RGB',(64,64),'#FFD700'); img.save('lion_icon.ico')"
        fi
        pyinstaller --onefile --name="Lion-AI-Detection" deepfake_monitor.py
        cp dist/Lion-AI-Detection ../Lion-AI-Detection
      shell: bash
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.executable }}
        if-no-files-found: error

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: List artifacts (debug)
      run: |
        echo "Listing all downloaded artifacts:"
        ls -la ./artifacts/
        echo "Detailed structure:"
        find ./artifacts/ -type f -ls
    
    - name: Prepare release files
      run: |
        mkdir -p ./release-files
        
        # Copy and rename files for clarity
        if [ -f "./artifacts/Lion-AI-Detection-Windows/Lion-AI-Detection.exe" ]; then
          cp "./artifacts/Lion-AI-Detection-Windows/Lion-AI-Detection.exe" "./release-files/Lion-AI-Detection-Windows.exe"
          echo "‚úÖ Windows executable prepared"
        else
          echo "‚ùå Windows executable not found"
        fi
        
        if [ -f "./artifacts/Lion-AI-Detection-macOS/Lion-AI-Detection" ]; then
          cp "./artifacts/Lion-AI-Detection-macOS/Lion-AI-Detection" "./release-files/Lion-AI-Detection-macOS"
          echo "‚úÖ macOS executable prepared"
        else
          echo "‚ùå macOS executable not found"
        fi
        
        if [ -f "./artifacts/Lion-AI-Detection-Linux/Lion-AI-Detection" ]; then
          cp "./artifacts/Lion-AI-Detection-Linux/Lion-AI-Detection" "./release-files/Lion-AI-Detection-Linux"
          echo "‚úÖ Linux executable prepared"
        else
          echo "‚ùå Linux executable not found"
        fi
        
        echo "Final release files:"
        ls -la ./release-files/
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Lion AI Detection ${{ steps.get_version.outputs.VERSION }}
        body: |
          # ü¶Å Lion AI Detection - Desktop Guardian ${{ steps.get_version.outputs.VERSION }}
          
          **Real-time AI voice detection for your computer**
          
          ## üì• Download for Your Platform
          
          **Windows:** `Lion-AI-Detection-Windows.exe`
          **macOS:** `Lion-AI-Detection-macOS` 
          **Linux:** `Lion-AI-Detection-Linux`
          
          ## üì• Quick Start
          1. **Download** the file for your operating system below
          2. **Windows:** Run the .exe (may show security warning - click "Keep")
          3. **macOS:** You may need to right-click ‚Üí Open to bypass Gatekeeper
          4. **Linux:** Make executable with `chmod +x Lion-AI-Detection-Linux`
          5. **Follow** the first-time setup dialog for audio configuration
          6. **Right-click** system tray icon to start monitoring
          
          ## üé§ Audio Setup (Important!)
          - **Windows:** Enable "Stereo Mix" in Sound settings for system audio
          - **macOS:** Grant microphone permissions when prompted
          - **Linux:** Ensure PulseAudio/ALSA is properly configured
          - **All platforms:** See in-app help menu for detailed instructions
          
          ## ‚ö° Features This Release
          - Real-time deepfake detection (under 2 seconds)
          - Cross-platform system tray operation
          - Smart alert system (reduces false alarms)
          - Audio setup help and first-time wizard
          - Auto-start option (Windows/Linux)
          - Detection history and logging
          
          ## üîß System Requirements
          - **Windows:** 10/11 (64-bit)
          - **macOS:** 10.14+ (Mojave or newer)
          - **Linux:** Ubuntu 18.04+ or equivalent
          - Microphone or system audio capability
          - Internet connection for AI analysis
          - ~50MB disk space
          
          ## üõ°Ô∏è Privacy & Security
          - **No data stored** - all processing is real-time
          - **Secure API** - uses Hugging Face infrastructure
          - **No registration** required
          - **Audio never saved** to disk
          
          ## üêõ Troubleshooting
          - **Download warnings:** Normal for unsigned apps - approve in security settings
          - **macOS:** Right-click ‚Üí Open to bypass Gatekeeper warnings
          - **Linux:** Ensure executable permissions with `chmod +x`
          - **No system audio:** Configure audio capture in OS settings
          
          ---
          **üÜì Free during beta | $2.99/month after public launch**
          
          **Questions?** Check the in-app help or create an issue on GitHub.
        draft: false
        prerelease: false
        files: |
          ./release-files/Lion-AI-Detection-Windows.exe
          ./release-files/Lion-AI-Detection-macOS
          ./release-files/Lion-AI-Detection-Linux